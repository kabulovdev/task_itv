definitions:
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.Movie:
    properties:
      director:
        type: string
      id:
        type: integer
      plot:
        type: string
      title:
        type: string
      year:
        type: integer
    required:
    - director
    - title
    - year
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
info:
  contact: {}
  description: This is a ITV movies Gateway server.
  title: ITV movies Gateway v1
  version: "1.0"
paths:
  /api/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and get JWT token (login with username and password
        only)
      parameters:
      - description: Username
        in: query
        name: username
        required: true
        type: string
      - description: Password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
      tags:
      - auth
  /api/movies:
    get:
      description: Retrieve all movies with optional search and pagination
      parameters:
      - description: Search by title (partial match)
        in: query
        name: title
        type: string
      - description: Search by year
        in: query
        name: year
        type: integer
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Page size (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Movie'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all movies
      tags:
      - movies
    post:
      consumes:
      - application/json
      description: Create a new movie record
      parameters:
      - description: Movie to create
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.Movie'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new movie
      tags:
      - movies
  /api/movies/{id}:
    delete:
      description: Delete a movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a movie
      tags:
      - movies
    get:
      description: Retrieve a specific movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Movie'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a movie by ID
      tags:
      - movies
    put:
      consumes:
      - application/json
      description: Update an existing movie record
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Movie to update
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.Movie'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a movie
      tags:
      - movies
  /api/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, email, password, and role
      parameters:
      - description: User registration info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
